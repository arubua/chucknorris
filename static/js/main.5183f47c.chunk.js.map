{"version":3,"sources":["ColorModeSwitcher.js","components/Facts.js","components/Categories.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","Facts","useState","fact","setFact","console","log","fetchFact","category","a","url","axios","result","data","useEffect","border","borderColor","rounded","mx","minW","p","spacing","w","h","src","icon_url","minH","maxW","value","Repeat","cursor","e","preventDefault","my","href","isExternal","ExternalLink","Categories","categories","setCategories","setCategory","fetchData","mb","onChange","target","placeholder","map","toUpperCase","App","theme","mt","fontWeight","textAlign","colorScheme","leftIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5183f47c.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Box, HStack, Image, Text, VStack, Link } from '@chakra-ui/react';\nimport axios from 'axios';\nimport { ExternalLinkIcon, RepeatIcon } from '@chakra-ui/icons';\n\nconst Facts = props => {\n  const [fact, setFact] = useState(null);\n  console.log(fact);\n\n  const fetchFact = async category => {\n    const url = `https://api.chucknorris.io/jokes/random?category=${category}`;\n    const result = await axios(url);\n    setFact(result.data);\n  };\n\n  useEffect(() => {\n    if (props.category !== null) {\n      fetchFact(props.category);\n    }\n  }, [props.category]);\n\n  const handleClick = e => {\n    e.preventDefault();\n    fetchFact(props.category);\n  };\n\n  return (\n    <Box\n      border=\"1px\"\n      borderColor=\"gray.200\"\n      rounded=\"lg\"\n      mx=\".5em !important\"\n      minW=\"300px\"\n      p={['.5em', '1em', '1em', '1em']}\n    >\n      {fact == null ? (\n        <Box>\n          <Text color=\"gray.600\">\n            Facts will appear here.Select a category to get started.\n          </Text>\n        </Box>\n      ) : (\n        <VStack>\n          <HStack spacing=\"4\">\n            <Image w=\"50px\" h=\"50px\" src={fact.icon_url} />\n\n            <Text\n              fontSize={['sm', 'md', 'lg', 'lg']}\n              //color=\"gray.600\"\n              //bgColor=\"orange.100\"\n              rounded=\"lg\"\n              p=\".2em\"\n              minH=\"2.2em\"\n              maxW=\"1000px\"\n            >\n              {fact.value}\n            </Text>\n\n            <RepeatIcon\n              cursor=\"pointer\"\n              color=\"orange.400\"\n              onClick={handleClick}\n              my=\".2em\"\n            />\n            <Link href={`${fact.url}`} isExternal>\n              <ExternalLinkIcon my=\".4em\" color=\"orange.400\" />\n            </Link>\n          </HStack>\n        </VStack>\n      )}\n    </Box>\n  );\n};\n\nexport default Facts;\n","import React, { useState, useEffect } from 'react';\nimport { Box, Select } from '@chakra-ui/react';\nimport axios from 'axios';\nimport Facts from './Facts';\n\nconst Categories = () => {\n  const [categories, setCategories] = useState(null);\n  console.log(categories);\n\n  let [category, setCategory] = useState(null);\n  console.log(category);\n\n  let handleCategoryChange = e => {\n    setCategory(e.target.value);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('https://api.chucknorris.io/jokes/categories');\n\n      setCategories(result.data);\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <Box mb=\"2em\">\n        <Select\n          onChange={handleCategoryChange}\n          w={['xs', 'xs', 'sm', 'sm']}\n          placeholder=\"Select category\"\n        >\n          {categories !== null\n            ? categories.map(category => (\n                <option key={category} value={category}>\n                  {category.toUpperCase()}\n                </option>\n              ))\n            : null}\n        </Select>\n      </Box>\n      <Facts category={category} />\n    </>\n  );\n};\n\nexport default Categories;\n","import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  theme,\n  Heading,\n  VStack,\n  Link,\n  Button,\n} from '@chakra-ui/react';\nimport { AiFillGithub } from 'react-icons/ai';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nimport Categories from './components/Categories';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Box fontSize=\"xl\">\n        <Box>\n          <VStack>\n            <ColorModeSwitcher mt=\".5em\" />\n            <Heading\n              mt=\".5em\"\n              color=\"orange.400\"\n              fontWeight=\"bold\"\n              fontSize={['4xl', '4xl', '6xl', '6xl']}\n            >\n              CHUKNORRIS.IO\n            </Heading>\n            <Categories />\n            <Box textAlign=\"center\" mt=\"200px !important\">\n              <Link href=\"https://github.com/arubua/chucknorris\" isExternal>\n                <Button\n                  colorScheme=\"orange\"\n                  fontSize=\"sm\"\n                  leftIcon={<AiFillGithub />}\n                >\n                  Open in Github\n                </Button>\n              </Link>\n            </Box>\n          </VStack>\n        </Box>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}